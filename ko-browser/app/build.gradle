apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//apply plugin: 'spotbugs'
apply plugin: 'jacoco'
//apply plugin: 'jacoco-android'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply from: "$project.rootDir/tools/gradle/versionCode.gradle"

android {
    signingConfigs {
        config {
            keyAlias 'key0'
            keyPassword 'vbrowser@123456'
            storeFile file('/Users/nguyenducthuan/Documents/MyProjects/MonnyLab/UpBrowser/key/vbrowser.txt')
            storePassword 'vbrowser@123456'
        }
    }

    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.khong.kobrowser"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1 // This versionCode is "frozen" for local builds. For "release" builds we
        // override this with a generated versionCode at build time.
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "ko-browser-${variant.buildType.name}.apk"
            }
        }
    }

    dexOptions {
        preDexLibraries true
    }

    // We have a three dimensional build configuration:

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
//            applicationIdSuffix ".debug"
        }
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    flavorDimensions "product", "engine"

    productFlavors {
        // We can build with two engines: webview or gecko
        webview {
            dimension "engine"
        }

        up {
            dimension "product"

//            applicationIdSuffix ".up"
        }
    }

    variantFilter { variant ->
        def flavors = variant.flavors*.name
        // We only need a gecko debug and beta build for now.
        if (flavors.contains("gecko") && ((variant.buildType.name != "debug" && variant.buildType.name != "beta") || flavors.contains("klar"))) {
            setIgnore(true)
        }
    }

    sourceSets {
        test {
            resources {
                // Make the default asset folder available as test resource folder. Robolectric seems
                // to fail to read assets for our setup. With this we can just read the files directly
                // and do not need to rely on Robolectric.
                srcDir "${projectDir}/src/main/assets/"
            }
        }

        //Up Version
        upWebviewRelease {
            java.srcDir 'src/upWebview/java'
            manifest.srcFile 'src/upWebview/AndroidManifest.xml'
            res.srcDir 'src/upWebview/res'
        }
        upWebviewDebug {
            res.srcDir 'src/upWebview/res'
        }
    }

    android {
        lintOptions {
            checkReleaseBuilds true
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        resources.excludes.add("META-INF/*")
    }
}

//kotlin {
//    experimental { coroutines 'enable' }
//}

//jacocoAndroidUnitTestReport {
//    csv.enabled false
//    html.enabled true
//    xml.enabled true
//}

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
}

dependencies {
    implementation project(path: ":easypermissions")
    implementation project(path: ":androidy")
    implementation project(path: ':pin')

//    implementation 'pub.devrel:easypermissions:3.0.0'

//    implementation 'com.android.billingclient:billing:1.2'
    implementation "com.android.support:appcompat-v7:$support_libraries_version"
    implementation "com.android.support:customtabs:$support_libraries_version"
    implementation "com.android.support:design:$support_libraries_version"
    implementation "com.android.support:cardview-v7:$support_libraries_version"
    implementation "com.android.support:recyclerview-v7:$support_libraries_version"
    implementation "com.android.support:preference-v14:$support_libraries_version"
    implementation "android.arch.lifecycle:extensions:$architecture_components_version"
//    implementation('com.google.code.findbugs:annotations:3.0.1') {
//        // We really only need the SuppressFBWarnings annotation, everything else can be ignored.
//        // Without this we get weird failures due to dependencies.
//        transitive = false
//    }
    implementation "com.github.spotbugs:spotbugs:4.7.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.19.3'
    implementation 'com.google.android.gms:play-services-analytics:16.0.8'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
//    implementation 'pub.devrel:easypermissions:2.0.1'
    // Room (use 1.1.0-alpha2 for latest alpha)
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    annotationProcessor "android.arch.persistence.room:compiler:1.1.1"
    kapt "android.arch.persistence.room:compiler:1.1.1"
    //Android download manager
    //implementation 'com.tonyodev.fetch2:fetch2:2.0.0-RC10'
    implementation project(':fetch2')
    implementation project(':fetch2downloaders')
    implementation 'it.sephiroth.android.library.targettooltip:target-tooltip-library:1.3.15'
}

// -------------------------------------------------------------------------------------------------
//  Dynamically set versionCode (See tools/build/versionCode.gradle
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    def buildType = variant.buildType.name
    def isBetaOrRelease = buildType == "release" || buildType == "beta"

//    if (isBetaOrRelease) {
//        variant.mergedFlavor.versionCode = generatedVersionCode
//    }

    println("Build type: " + buildType + " (versionCode = " + variant.mergedFlavor.versionCode + ")")
}

// -------------------------------------------------------------------------------------------------
// Generate blocklists
// -------------------------------------------------------------------------------------------------

def blockListOutputDir = 'src/webview/res/raw'

task buildBlocklists(type:Copy) {
    from('../shavar-prod-lists') {
        include '*.json'
    }
    into blockListOutputDir

    // Android can't handle dashes in the filename, so we need to rename:
    rename 'disconnect-blacklist.json', 'blocklist.json'
    rename 'disconnect-entitylist.json', 'entitylist.json'
    // google_mapping.json already has an expected name
}

clean.doLast {
    file(blockListOutputDir).deleteDir()
}

tasks.whenTaskAdded { task ->
    def name = task.name
    if (name.contains("generate") && name.contains("Config") && name.contains("Webview")) {
        task.dependsOn buildBlocklists
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Generate list of locales
// Focus provides its own (Android independent) locale switcher. That switcher requires a list
// of locale codes. We generate that list here to avoid having to manually maintain a list of locales:
// -------------------------------------------------------------------------------------------------

def getEnabledLocales() {
    def resDir = file('src/main/res')

    def potentialLanguageDirs = resDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.startsWith("values-")
        }
    })

    def langs = potentialLanguageDirs.findAll {
        // Only select locales where strings.xml exists
        // Some locales might only contain e.g. sumo URLS in urls.xml, and should be skipped (see es vs es-ES/es-MX/etc)
        return  file(new File(it, "strings.xml")).exists()
    } .collect {
        // And reduce down to actual values-* names
        return it.name
    } .collect {
        return it.substring("values-".length())
    } .collect {
        if (it.length() > 3 && it.contains("-r")) {
            // Android resource dirs add an "r" prefix to the region - we need to strip that for java usage
            // Add 1 to have the index of the r, without the dash
            def regionPrefixPosition = it.indexOf("-r") + 1

            return it.substring(0, regionPrefixPosition) + it.substring(regionPrefixPosition + 1)
        } else {
            return it
        }
    }.collect {
        return '"' + it + '"'
    }

    // en-US is the default language (in "values") and therefore needs to be added separately
    langs << "\"en-US\""

    return langs.sort { it }
}

def generatedLocaleListDir = 'src/main/java/com/xlab/vbrowser/generated'
def generatedLocaleListFilename = 'LocaleList.java'

task generateLocaleList {
    doLast {
        def dir = file(generatedLocaleListDir)
        dir.mkdir()
        def localeList = file(new File(dir, generatedLocaleListFilename))

        localeList.delete()
        localeList.createNewFile()
        localeList << "package com.xlab.vbrowser.generated;" << "\n" << "\n"
        localeList << "import java.util.Arrays;" << "\n"
        localeList << "import java.util.Collections;" << "\n"
        localeList << "import java.util.List;" << "\n"
        localeList << "\n"
        localeList << "public class LocaleList {" << "\n"
        // findbugs doesn't like "public static final String[]", see http://findbugs.sourceforge.net/bugDescriptions.html#MS_MUTABLE_ARRAY
        localeList << "    public static final List<String> BUNDLED_LOCALES = Collections.unmodifiableList(Arrays.asList(new String[] { "
        localeList << getEnabledLocales().join(", ") + " }));" << "\n"
        localeList << "}" << "\n"
    }
}

tasks.whenTaskAdded { task ->
    if (name.contains("compile")) {
        task.dependsOn generateLocaleList
    }
}

clean.doLast {
    file(generatedLocaleListDir).deleteDir()
}

// -------------------------------------------------------------------------------------------------
// Static Analysis: findbugs and pmd
// -------------------------------------------------------------------------------------------------

//spotbugs {
//    ignoreFailures = false
//
//    effort = "max"
//    // This selects what level of bugs to report: low means low priority issues will be reported
//    // (in addition to medium+high), which corresponds to warning about everything.
//    // TODO: boost this to low once low priority issues are fixed.
//    reportLevel = "medium"
//
//    excludeFilter = new File("${project.rootDir}/quality/findbugs-exclude.xml")
//}

//task spotbugs(type: com.github.spotbugs.SpotBugsTask, dependsOn: "assemble", group: 'verification') {
//    classes = files("$projectDir.absolutePath/build/intermediates/classes")
//
//    source = fileTree('src/main/java')
//    classpath = files()
//
//    // Only one report format is supported. Html is easier to read, so let's use that
//    // (xml is the one that's enabled by default).
//    reports {
//        xml.enabled = false
//        html.enabled = true
//    }
//}

pmd {
    toolVersion = '5.5.2'
    ignoreFailures = true
    ruleSetFiles = files("${project.rootDir}/quality/pmd-rules.xml")
    ruleSets = []
}

//task pmd(type: Pmd, group: 'verification') {
//    source 'src'
//    include '**/*.java'
//    exclude('**/gen/**',
//            '**/debug/**',
//            '**/androidTest/**',
//            '**/test**/**')
//
//    reports {
//        xml.enabled = false
//        html.enabled = true
//        html {
//            destination "$projectDir.absolutePath/build/reports/pmd/pmd.html"
//        }
//    }
//}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/quality/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

afterEvaluate {
    check.dependsOn 'spotbugs', 'pmd', 'checkstyle'
}

kapt {
    correctErrorTypes true
}